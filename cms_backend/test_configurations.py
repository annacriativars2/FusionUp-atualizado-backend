#!/usr/bin/env python3
"""
Script para testar as APIs de configura√ß√µes do sistema
"""

import requests
import json

BASE_URL = "http://localhost:8000"

def test_configurations_api():
    print("üß™ Testando APIs de Configura√ß√µes do Sistema\n")
    
    # 1. Login como admin
    print("1. Fazendo login como administrador...")
    login_data = {
        "email": "admin@example.com",
        "password": "admin123"
    }
    
    response = requests.post(f"{BASE_URL}/api/auth/login/", json=login_data)
    if response.status_code == 200:
        tokens = response.json()
        headers = {"Authorization": f"Bearer {tokens['access']}"}
        print("‚úÖ Login realizado com sucesso!")
    else:
        print("‚ùå Erro no login:", response.text)
        return
    
    # 2. Listar todas as configura√ß√µes
    print("\n2. Listando todas as configura√ß√µes...")
    response = requests.get(f"{BASE_URL}/api/configurations/", headers=headers)
    if response.status_code == 200:
        configs = response.json()
        print(f"‚úÖ {len(configs['results'])} configura√ß√µes encontradas")
        for config in configs['results'][:3]:  # Mostrar apenas as 3 primeiras
            print(f"   - {config['label']} ({config['key']}): {config['value_typed']}")
    else:
        print("‚ùå Erro ao listar configura√ß√µes:", response.text)
    
    # 3. Listar configura√ß√µes agrupadas por categoria
    print("\n3. Listando configura√ß√µes por categoria...")
    response = requests.get(f"{BASE_URL}/api/configurations/?group_by_category=true", headers=headers)
    if response.status_code == 200:
        categories = response.json()
        print(f"‚úÖ {len(categories)} categorias encontradas:")
        for category in categories:
            print(f"   - {category['label']}: {len(category['configurations'])} configura√ß√µes")
    else:
        print("‚ùå Erro ao listar por categoria:", response.text)
    
    # 4. Buscar configura√ß√µes
    print("\n4. Buscando configura√ß√µes com 'site'...")
    response = requests.get(f"{BASE_URL}/api/configurations/?search=site", headers=headers)
    if response.status_code == 200:
        configs = response.json()
        print(f"‚úÖ {len(configs['results'])} configura√ß√µes encontradas na busca")
    else:
        print("‚ùå Erro na busca:", response.text)
    
    # 5. Atualizar uma configura√ß√£o
    print("\n5. Atualizando configura√ß√£o 'site_name'...")
    update_data = {"value": "Meu CMS Atualizado"}
    response = requests.patch(f"{BASE_URL}/api/configurations/site_name/", json=update_data, headers=headers)
    if response.status_code == 200:
        result = response.json()
        print("‚úÖ Configura√ß√£o atualizada:", result['message'])
        print(f"   Novo valor: {result['configuration']['value_typed']}")
    else:
        print("‚ùå Erro ao atualizar:", response.text)
    
    # 6. Criar nova configura√ß√£o
    print("\n6. Criando nova configura√ß√£o...")
    new_config = {
        "key": "test_config",
        "label": "Configura√ß√£o de Teste",
        "description": "Uma configura√ß√£o criada para teste",
        "category": "general",
        "type": "text",
        "value": "Valor de teste",
        "is_public": True,
        "order": 999
    }
    response = requests.post(f"{BASE_URL}/api/configurations/", json=new_config, headers=headers)
    if response.status_code == 201:
        result = response.json()
        print("‚úÖ Nova configura√ß√£o criada:", result['message'])
    else:
        print("‚ùå Erro ao criar configura√ß√£o:", response.text)
    
    # 7. Atualiza√ß√£o em lote
    print("\n7. Testando atualiza√ß√£o em lote...")
    bulk_data = {
        "configurations": [
            {"key": "site_name", "value": "CMS Django React"},
            {"key": "site_description", "value": "Sistema moderno de gerenciamento de conte√∫do"}
        ]
    }
    response = requests.post(f"{BASE_URL}/api/configurations/bulk_update/", json=bulk_data, headers=headers)
    if response.status_code == 200:
        result = response.json()
        print("‚úÖ Atualiza√ß√£o em lote:", result['message'])
    else:
        print("‚ùå Erro na atualiza√ß√£o em lote:", response.text)
    
    # 8. Testar endpoint p√∫blico
    print("\n8. Testando endpoint p√∫blico de configura√ß√µes...")
    response = requests.get(f"{BASE_URL}/api/public/configurations/")
    if response.status_code == 200:
        public_configs = response.json()
        print(f"‚úÖ {len(public_configs)} configura√ß√µes p√∫blicas dispon√≠veis:")
        for key, value in list(public_configs.items())[:3]:  # Mostrar apenas as 3 primeiras
            print(f"   - {key}: {value}")
    else:
        print("‚ùå Erro ao acessar configura√ß√µes p√∫blicas:", response.text)
    
    # 9. Testar endpoint de informa√ß√µes do site
    print("\n9. Testando endpoint de informa√ß√µes do site...")
    response = requests.get(f"{BASE_URL}/api/public/site-info/")
    if response.status_code == 200:
        site_info = response.json()
        print("‚úÖ Informa√ß√µes do site obtidas:")
        print(f"   - Site: {len(site_info.get('site', {}))} configura√ß√µes")
        print(f"   - SEO: {len(site_info.get('seo', {}))} configura√ß√µes")
        print(f"   - Social: {len(site_info.get('social', {}))} configura√ß√µes")
    else:
        print("‚ùå Erro ao obter informa√ß√µes do site:", response.text)
    
    # 10. Deletar configura√ß√£o de teste
    print("\n10. Deletando configura√ß√£o de teste...")
    response = requests.delete(f"{BASE_URL}/api/configurations/test_config/", headers=headers)
    if response.status_code == 204:
        print("‚úÖ Configura√ß√£o de teste deletada com sucesso!")
    else:
        print("‚ùå Erro ao deletar configura√ß√£o:", response.text)
    
    print("\nüéâ Teste das APIs de configura√ß√µes conclu√≠do!")

if __name__ == "__main__":
    test_configurations_api()

